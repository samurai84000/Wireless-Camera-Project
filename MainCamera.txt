 	// SimpleTx - the master or the transmitter
//The main camera of the system, sending information
//to the peripherals
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>




#define CE_PIN   7 //Chip Enable pin for NRF24l01
#define CSN_PIN 8 //Chip select pin fo NRF24l01

#define panJoystickPin A5;

const byte slaveAddress[5] = {'R','x','A','A','A'};







RF24 radio(CE_PIN, CSN_PIN); // Create a Radio


char dataToSend[6]; //array of chars sent through SPI as ASCII values
char tiltToSend[6];


int pan = 90;
int tilt = 89;


unsigned long currentMillis;
unsigned long prevMillis;
unsigned long txIntervalMillis = 100; // send once per second


void setup() {

    Serial.begin(9600);

    Serial.println("SimpleTx Starting");

    radio.begin();
    radio.setDataRate( RF24_250KBPS );
    //radio.setRetries(1,5); // delay, count
    radio.openWritingPipe(slaveAddress);
}

//====================

void loop() {
    currentMillis = millis();
    if (currentMillis - prevMillis >= txIntervalMillis) {

      //Serial.println(xValue);
      //Serial.println(pan);
      
      
      allThePanFunctions();
      send();


      allTheTiltFunctions();
      send();
      prevMillis = millis();
    }
}

//====================

void send() {

    bool rslt;
    rslt = radio.write( &dataToSend, sizeof(dataToSend) );
        // Always use sizeof() as it gives the size as the number of bytes.
        // For example if dataToSend was an int sizeof() would correctly return 2

    Serial.print("Data Sent ");
    Serial.println(dataToSend);
    if (rslt) {
        
    }
    else {
        
    }
}

//================
//method dedicated to keeping the servos within their 
//bounds
void panCheck(){
int xValue = analogRead(A0);  
Serial.println(xValue);
if(xValue > 30){
        pan++;
      } else if(xValue < 10){
        pan--;
      }
      if(pan > 130){
        pan = 130;
      }
      if (pan < 16){
        pan = 16;
      }
}
//method dedicated to keeping servo within its bounds
void tiltCheck(){
int tiltAnalogRead = analogRead(A5);  


if(tiltAnalogRead > 30){
        tilt++;
      } else if(tiltAnalogRead < 10){
        tilt--;
      }
      if(tilt > 89){
        tilt = 89;
      }
      if (tilt < 16){
        tilt = 16;
      }
}
//method used to pan the camera extra fast in case
//the players on the field are moving too fast
/**void fastPanCheck(){
  int fastXValue = analogRead(A2); 
if(fastXValue > 1000){
        pan = pan + 5;
      } else if(fastXValue < 100){
        pan = pan - 5;
      }
      if(pan > 89){
        pan = 89;
      }
      if (pan < 16){
        pan = 16;
      }
      delay(10);
}*/



//sends the pan characters to the NRF24l01 for
//wirelss transmition
void panConvertSend(){
  int i = 0;
  String temp = String(pan);
  for(i; i< temp.length(); i++){
      dataToSend[i] = temp.charAt(i);
  }
}
//sends the tilt characters to the NRF24l01 for
//wirelss transmition
void tiltConvertSend(){
  int i = 0;
  String temp = String(tilt);
  for(i; i< temp.length(); i++){
      dataToSend[i] = temp.charAt(i);
  }
}
//encodes the first char of the transmission
//to say these are pan coordinates with
//a P
void setPanWireless(){
  for(int i = 0; i < 5; i++){
    dataToSend[i] = 'P';
  }
}
//encodes the first char of the transmission
//to say these are tilt coordinates with
//a T
void setTiltWireless(){
  for(int i = 0; i < 5; i++){
    dataToSend[i] = 'T';
  }
}


void allThePanFunctions(){
  setPanWireless();
  panCheck();
  //fastPanCheck();
  panConvertSend(); 
}

void allTheTiltFunctions(){
  setTiltWireless();
  tiltCheck();
  tiltConvertSend();
  
}
